# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDepartmentInput {
  description: String
  name: String!
  organizationId: String!
}

input CreateOrganizationInput {
  address: String!
  description: String!
  name: String!
}

input CreatePermissionInput {
  description: String
  name: String!
}

input CreateRoleInput {
  description: String
  name: String!
}

input CreateRolePermissionInput {
  permissionId: String!
  roleId: String!
}

input CreateTeamInput {
  departmentId: String!
  description: String
  name: String!
}

input CreateUserInput {
  email: String!
  name: String!
  teamId: String!
}

input CreateUserRoleInput {
  roleId: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Department {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  organization: Organization!
  teams: [Team!]!
  updatedAt: DateTime!
}

type Mutation {
  createDepartment(createDepartmentInput: CreateDepartmentInput!): Department!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createRolePermission(createRolePermissionInput: CreateRolePermissionInput!): RolePermission!
  createTeam(createTeamInput: CreateTeamInput!): Team!
  createUser(createUserInput: CreateUserInput!): User!
  createUserRole(createUserRoleInput: CreateUserRoleInput!): UserRole!
  removeDepartment(id: String!): Department!
  removeOrganization(id: String!): Organization!
  removePermission(id: String!): Permission!
  removeRole(id: String!): Role!
  removeRolePermission(id: String!): RolePermission!
  removeTeam(id: String!): Team!
  removeUser(id: String!): User!
  removeUserRole(id: String!): UserRole!
  updateDepartment(updateDepartmentInput: UpdateDepartmentInput!): Department!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updatePermission(updatePermissionInput: UpdatePermissionInput!): Permission!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  updateRolePermission(updateRolePermissionInput: UpdateRolePermissionInput!): RolePermission!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserRole(updateUserRoleInput: UpdateUserRoleInput!): UserRole!
}

type Organization {
  address: String
  createdAt: DateTime!
  departments: [Department!]!
  description: String
  id: String!
  name: String!
  updatedAt: DateTime!
}

type PaginatedOrganizationResponse {
  organizations: [Organization!]!
  total: Float!
}

type Permission {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  rolePermissions: [RolePermission!]
  updatedAt: DateTime!
}

type Query {
  findAllDepartment(organizationId: String!): [Department!]!
  findAllOrganization(limit: Float!, page: Float!, sortBy: String!, sortOrder: String!): PaginatedOrganizationResponse!
  findAllPermissions: [Permission!]!
  findAllRole: [Role!]!
  findAllRolePermissions: [RolePermission!]!
  findAllTeam(departmentId: String!): [Team!]!
  findAllUser(teamId: String!): [User!]!
  findAllUserRole(roleId: String, userId: String): [UserRole!]!
  findOneDepartment(id: String!): Department!
  findOneOrganization(id: String!): Organization!
  findOnePermission(id: String!): Permission!
  findOneRole(id: String!): Role!
  findOneRolePermission(id: String!): RolePermission!
  findOneTeam(id: String!): Team!
  findOneUser(id: String!): User!
  findOneUserRole(id: String!): UserRole!
}

type Role {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  rolePermissions: [RolePermission!]
  updatedAt: DateTime!
  userRoles: [UserRole!]
}

type RolePermission {
  createdAt: DateTime!
  id: ID!
  permission: Permission!
  role: Role!
  updatedAt: DateTime!
}

type Team {
  createdAt: DateTime!
  department: Department!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
  users: [User!]!
}

input UpdateDepartmentInput {
  description: String
  id: ID!
  name: String
  organizationId: String
}

input UpdateOrganizationInput {
  address: String
  description: String
  id: String!
  name: String
}

input UpdatePermissionInput {
  description: String
  id: ID!
  name: String
}

input UpdateRoleInput {
  description: String
  id: ID!
  name: String
}

input UpdateRolePermissionInput {
  id: ID!
  permissionId: String
  roleId: String
}

input UpdateTeamInput {
  departmentId: String
  description: String
  id: ID!
  name: String
}

input UpdateUserInput {
  email: String
  id: ID!
  name: String
  teamId: String
}

input UpdateUserRoleInput {
  id: ID!
  roleId: String
  userId: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  team: Team!
  updatedAt: DateTime!
  userRoles: [UserRole!]
}

type UserRole {
  createdAt: DateTime!
  id: ID!
  role: Role!
  updatedAt: DateTime!
  user: User!
}